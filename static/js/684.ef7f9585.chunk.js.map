{"version":3,"file":"static/js/684.ef7f9585.chunk.js","mappings":"2QAQe,SAASA,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KACA,GAA0BN,EAAAA,EAAAA,UAAS,MAAnC,eAAOO,EAAP,KAAcC,EAAd,KACMC,GAAUC,EAAAA,EAAAA,IAAYC,EAAAA,EAAAA,kBAEtBC,EAAe,SAAC,GAAiC,IAAD,IAA9BC,OAAUZ,EAAoB,EAApBA,KAAMa,EAAc,EAAdA,MACtC,OAAQb,GACN,IAAK,OACH,OAAOC,EAAQY,GACjB,IAAK,QACH,OAAOV,EAASU,GAClB,IAAK,WACH,OAAOR,EAAYQ,GACrB,QACE,SAeN,OANAC,EAAAA,EAAAA,YAAU,WACJN,GACFD,GAAS,KAEV,CAACC,KAGF,SAAC,KAAD,WACE,4BACE,0BACE,uCAEF,kBAAMO,SAjBS,SAAAC,GACnBA,EAAEC,iBACFpB,EAASqB,EAAAA,EAAAA,SAAwB,CAAElB,KAAAA,EAAME,MAAAA,EAAOE,SAAAA,MAede,aAAa,MAA3C,WACE,kBACEnB,KAAK,OACLoB,KAAK,OACLP,MAAOb,EACPqB,YAAY,OACZC,UAAQ,EACRC,SAAUZ,KAEZ,kBACEX,KAAK,QACLoB,KAAK,QACLP,MAAOX,EACPmB,YAAY,QACZC,UAAQ,EACRC,SAAUZ,EACVa,GAAI,CACFC,GAAI,MAGR,kBACEzB,KAAK,WACLoB,KAAK,WACLC,YAAY,WACZR,MAAOT,EACPkB,UAAQ,EACRC,SAAUZ,EACVa,GAAI,CACFC,GAAI,MAIR,mBACEL,KAAK,SACLM,MAAM,UACNF,GAAI,CACFC,GAAI,GAJR,wBAUDnB,IACC,SAAC,IAAD,CACEkB,GAAI,CACFE,MAAO,WAFX","sources":["views/RegisterView.js"],"sourcesContent":["import { CssVarsProvider } from '@mui/joy/styles';\nimport { Typography} from '@mui/joy';\nimport { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport authOperations from '../redux/auth/auth-operations';\nimport authSelectors from '../redux/auth/auth-selectors';\n\n\nexport default function RegisterView() {\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState(null);\n  const isError = useSelector(authSelectors.getErrorRegister);\n\n  const handleChange = ({ target: { name, value } }) => {\n    switch (name) {\n      case 'name':\n        return setName(value);\n      case 'email':\n        return setEmail(value);\n      case 'password':\n        return setPassword(value);\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(authOperations.register({ name, email, password }));\n  };\n\n  useEffect(() => {\n    if (isError) {\n      setError(true);\n    }\n  }, [isError]);\n\n  return (\n    <CssVarsProvider>\n      <div >\n        <div >\n          <h3>Sign up</h3>\n        </div>\n        <form onSubmit={handleSubmit} autoComplete=\"off\">\n          <input \n            name=\"name\"\n            type=\"text\"\n            value={name}\n            placeholder=\"Name\"\n            required\n            onChange={handleChange}\n          />\n          <input\n            name=\"email\"\n            type=\"email\"\n            value={email}\n            placeholder=\"email\"\n            required\n            onChange={handleChange}\n            sx={{\n              mt: 2,\n            }}\n          />\n          <input\n            name=\"password\"\n            type=\"password\"\n            placeholder=\"password\"\n            value={password}\n            required\n            onChange={handleChange}\n            sx={{\n              mt: 2,\n            }}\n          />\n\n          <button\n            type=\"submit\"\n            color=\"primary\"\n            sx={{\n              mt: 4,\n            }}\n          >\n            Sign up\n          </button>\n        </form>\n        {error && (\n          <Typography\n            sx={{\n              color: '#ff0000',\n            }}\n          >\n            Please, check if you entered email and password correctly. Your password must contain at least 7 characters. \n          </Typography>\n        )}\n      </div>\n    </CssVarsProvider>\n  );\n}\n"],"names":["RegisterView","dispatch","useDispatch","useState","name","setName","email","setEmail","password","setPassword","error","setError","isError","useSelector","authSelectors","handleChange","target","value","useEffect","onSubmit","e","preventDefault","authOperations","autoComplete","type","placeholder","required","onChange","sx","mt","color"],"sourceRoot":""}